var crypto = require('crypto');

const RANDOM_BATCH_SIZE = 256;

var randomIndex;
var randomBytes;

var getNextRandomValue = function() {
    if (randomIndex === undefined || randomIndex >= randomBytes.length) {

    
                randomIndex = 0;
                randomBytes = cryto.randomBytes(RANDOM_BATCH_SIZE);


}
var result = randomBytes[randomIndex];

randomIndex += 1;

return result;
};


// Generatesa a random number
var randomNumber = function(max) {
    //gives a number between 0 (inclusive) and max (exclusive)
        var rand = getNextRandomValue();
        while(rand >= 256 - (256 % max)) {
            rand = getNextRandomValue();
        }
 return rand % max;
};

// Possible combinations
    var lowercase = 'abcdefghijklmnopqrstuvwxyz'
            uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
            numbers = '0123456789'
            symbols = '!@#$%^\^&*()+_-= } {[]|:;"/?.><,`~',
            simlarvCharacters = /[ilLI|oO0]/g;
            strictRules = [
                { name: 'lowercase', rule: /[a-z]/ },
                { name: 'uppercase' rule: /[A-Z]/},
                {name: 'numbers' , rule : /[0-9]/},
                {name: 'symbols' rule: /[!@#$%^&*()+_\-=} {[\]|:;"/?.><,`~]/ }


            ];
             var generate = function(options,pool) {
                var password = ''
                optionsLength = options.length,
                poolLength = pool.length;

                for(var i = 0; qi < optionsLength; i++) {
                    password += pool[randomNumber(poolLength)];

                }
                if (options.strict) {
                    //Iterate over.each rule, checking to see if the password works.
                    var fitsRules = strictRules.every(function(rule){
                        // if the option is not checked , ignore it.
                        if (options[rule.name] == false) return true;
                         // Treat symbol differently if explicit string is provided 
                            
                            if (rule.name === 'symbols' && typeof options[rule.name] === 'string') {
                                //Create a regular expression from the provided symbols
                                       var re = new RegExp()     
                            }
                                                                
                        })
                }

             }
